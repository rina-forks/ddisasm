//===- arm32_symbolization.dl ------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019-2022 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
ARM32 architecture-specific rules for symbolization
*/

avoid_symbols(Name):-
    (
        thumb_sym(Name);
        arm_sym(Name);
        data_sym(Name)
    ).

labeled_data_candidate(EA):-
    symbol(EA,_,Type,_,_,_,_,_,Name),
    !thumb_sym(Name),
    !arm_sym(Name),
    Type != "FUNC".

labeled_ea(EA+1):-
    defined_symbol(EA,_,Type,_,_,_,_,_,Name),
    thumb_sym(Name),
    Type != "SECTION",
    EA != 0.

labeled_ea(EA):-
    defined_symbol(EA,_,Type,_,_,_,_,_,Name),
    Type != "SECTION",
    !thumb_sym(Name),
    !data_sym(Name),
    EA != 0.

symbolic_operand_attribute(EA_lo,1,"G0"),
symbolic_operand_candidate(EA_lo,1,Dest,Type),
symbolic_operand_attribute(EA_hi,1,"G1"),
symbolic_operand_candidate(EA_hi,1,Dest,Type):-
    binary_type("EXEC"),
    movw_movt_pair(EA_lo,EA_hi,Value),
    Dest = as(Value,address),
    (
        code(Dest), Type="code"
        ;
        !litpool_ref(_,_,Dest,0,_,_),
        data_segment(Begin,End),
        Dest >= Begin, Dest <= End,
        Type = "data"
    ).

symbolic_operand_attribute(EA bor 1,1,"Part0"),
symbolic_expr_from_relocation(EA bor 1,4,Symbol,Addend,Dest):-
    binary_type("REL"),
    relocation(EA,"THM_MOVW_ABS_NC",Symbol,Addend,SymbolIndex,_,"REL"),
    symbol(SymAddr,_,_,_,_,_,_,SymbolIndex,Symbol),
    Dest = as(as(SymAddr,number)+Addend,address).

symbolic_operand_attribute(EA bor 1,1,"Part1"),
symbolic_expr_from_relocation(EA bor 1,4,Symbol,Addend,Dest):-
    binary_type("REL"),
    relocation(EA,"THM_MOVT_ABS",Symbol,Addend,SymbolIndex,_,"REL"),
    symbol(SymAddr,_,_,_,_,_,_,SymbolIndex,Symbol),
    Dest = as(as(SymAddr,number)+Addend,address).

// Comparisons aligned to large powers of two are less likely to be symbolic
// (they are more likely some kind of bitmasking operation)
symbolic_operand_point(EA,Imm_index,-1+Bonus,"unlikely to have symbolic operand"):-
    symbolic_operand_candidate(EA,Imm_index,Dest,_),
    instruction_get_operation(EA,Operation),
    !relocation(EA,_,_,_,_,_,_),
    (
        arch.cmp_operation(Operation)
        ;
        arch.logic_operation(Operation)
    ),
    (
        Dest band 0xff = 0,
        Bonus = -1
        ;
        Dest band 0xffff = 0,
        Bonus = -2
        ;
        Dest band 0xffffff = 0,
        Bonus = -3
        ;
        Dest = 0,
        Bonus = -4
    ).

/**
ldr Reg1, .L0
add add Reg2, Reg1, pc

Uses `def_used`
*/
.decl cinf_ldr_add_pc(EA_ldr:address,Size:unsigned,Reg1:register,LitPoolAddr:address,EA_add_pc:address,Reg2:register)

cinf_ldr_add_pc(EA_ldr,Size,Reg1,LitPoolAddr,EA_add_pc,Reg2):-
    litpool_ref(EA_ldr,EA_ldr,LitPoolAddr,0,Size,_),
    instruction_get_operation(EA_ldr,Operation),
    arch.load_operation(Operation),
    reg_def_use.def_used(EA_ldr,Reg1,EA_add_pc,_),
    arch.reg_reg_arithmetic_operation(EA_add_pc,Reg2,Reg1,PC,1,0),
    arch.pc_reg(PC).

.decl cinf_symbol_minus_symbol_candidate_arm(EA:address,Size:unsigned,Symbol1:address,Symbol2:address,Scale:unsigned,Offset:number)

/**
case 1:
PIC code uses inlined pc-relative offsets,

    ldr REG, .L0
    .LPIC0:
       add REG, pc
       ...
    .L0:
       .word foo-(.LPIC0+Disp)

    (Disp=4 for Thumb mode, 8 for ARM mode)

where the symbol foo is the target symbol, and .L0 will contain the offset
from PC at .LPIC0 to the symbol foo.

case 2:
    .L0:
       .long foo(GOT)
where foo is a symbol relocated by GOT.
*/
cinf_symbol_minus_symbol_candidate_arm(Addr,Size,EA_add_pc,Dest,Scale,Offset):-
    cinf_ldr_add_pc(_,Size,Reg,Addr,EA_add_pc,Reg),
    symbol_minus_symbol_candidate_arm(Addr,Size,EA_add_pc,Dest,Scale,Offset).

symbol_minus_symbol_candidate(Addr,Size,EA_add_pc,Dest,Scale,Offset):-
    cinf_symbol_minus_symbol_candidate_arm(Addr,Size,EA_add_pc,Dest,Scale,Offset).

/**
TODO: Ideally, we want to rename `cinf_symbol_minus_symbol_candidate_arm` to
the common rule `symbol_minus_symbol_candidate`, and use it here.
However, it causes a stratification problem. See
https://git.grammatech.com/rewriting/ddisasm/-/issues/392 for more details.
*/
labeled_data_candidate(Dest):-
    cinf_symbol_minus_symbol_candidate_arm(_,_,_,Dest,_,_),
    data_segment(Begin,End),
    Dest >= Begin, Dest <= End.

symbol_minus_symbol_from_relocation(EA,4,SymbolName2,"_GLOBAL_OFFSET_TABLE_",1,Offset):-
    binary_type("REL"),
    relocation(EA,"BASE_PREL","_GLOBAL_OFFSET_TABLE_",_,_,_,_),
    symbol_minus_symbol_litpool_access_pattern(_,4,_,EA,1,_,Symbol2,_,Type),
    (
        Type = "LDR", Offset = -4
        ;
        Type = "AddPC", Offset = 0
    ),
    best_symexpr_symbol(Symbol2,SymbolName2,"Beg").

data_object_candidate(LitPoolAddr,Size,"symbol-symbol"):-
    symbol_minus_symbol_litpool_access_pattern(LitPoolAddr,Size,_,_,_,_,_,_,_).

data_object_point(EA,Size,"symbol",5,"arm literal pool"),
data_object_candidate(LitPoolAddr,Size,"symbol"):-
    litpool_ref(EA,_,RefAddr,LitPoolOffset,Size,_),
    LitPoolAddr = RefAddr+as(LitPoolOffset,address),
    symbolic_operand_candidate(EA,_,RefAddr,_),
    !symbol_minus_symbol_litpool_access_pattern(LitPoolAddr,_,_,_,_,_,_,_,_).

symbolic_operand_candidate(EA,OpIndex,RefAddr,"data"):-
    code(EA),
    litpool_ref(EA,_,RefAddr,LitPoolOffset,_,OpIndex),
    LitPoolAddr = RefAddr+as(LitPoolOffset,address),
    !function_symbol(LitPoolAddr,_),
    data_segment(Begin,End),
    LitPoolAddr >= Begin, LitPoolAddr <= End.

symbolic_operand_candidate(EA,OpIndex,Dest,Type):-
    code(EA),
    arch.pc_relative_addr(EA,_,Dest0),
    // Dest0 is always even, we adjust it when pointing to thumb code
    (
        // Dest is ARM code
        Dest = Dest0,
        code(Dest),
        Type = "code"
        ;
        // Dest is Thumb code
        Dest = Dest0 + 1,
        code(Dest),
        Type = "code"

        ;
        Dest = Dest0 - (Dest0 band 1),
        data_segment(Begin,End),
        Dest >= Begin, Dest <= End,
        Type = "data"
    ),
    instruction_immediate_offset(EA,OpIndex,_,_).

/**
Matches instruction patterns that access a symbol-symbol from the literal pool.

(Symbol2-Symbol1)*Scale

EA: The address of the literal pool with the `symbol_minus_symbol` expression
Size: The size of the symbolic expression
EA_litpool_ref: The EA referencing the literal pool (EA)
EA_def: The address associated with Symbol1
Reg: The register containing Symbol2
Type: Either "LDR" or "AddPC"
*/
.decl symbol_minus_symbol_litpool_access_pattern(EA:address,Size:unsigned,Symbol1:address,Symbol2:address,Scale:unsigned,EA_litpool_ref:address,EA_def:address,Reg:register,Type:symbol)

/**
    ldr reg, LitPool
...
L1: add reg, pc
...
LitPool: .word TARGET - (L1+Disp)

where Disp = 4 for Thumb mode with word-aligned, and 8 for ARM mode.
*/
block_needs_splitting_at(EA_add_pc),
moved_data_label(LitPoolAddr,Size,Symbol1,EA_add_pc),
symbol_minus_symbol_litpool_access_pattern(LitPoolAddr,Size,Symbol1,Symbol2,1,EA,EA_add_pc,Reg,"LDR"):-
    cinf_ldr_add_pc(EA,Size,Reg,LitPoolAddr,EA_add_pc,Reg),

    data_word(LitPoolAddr,Size,Diff),
    arch.pc_relative_disp(EA_add_pc,Disp),
    Symbol1 = EA_add_pc + as(Disp,address),
    Addr2 = as(Diff,address) + Symbol1,
    // Align the symbol address
    align_addr(Symbol2,Addr2).

//     ldr reg1, LitPool
// ...
//     adr reg2, Base
//     add reg1, reg2
// ...
// LitPool: .word TARGET - Base
//
// (in observed cases, LitPool == Base)
symbol_minus_symbol_litpool_access_pattern(LitPoolAddr,Size,Symbol1,Symbol2,1,EA_ldr,EA_add,Reg1,"AddPC"):-
    // e.g., ldr reg1, LitPool
    litpool_ref(EA_ldr,EA_ldr,LitPoolAddr,0,Size,_),

    // e.g., add reg1, reg2
    reg_def_use.def_used(EA_ldr,Reg1,EA_add,_),
    arch.reg_reg_arithmetic_operation(EA_add,Reg1,Reg1,Reg2,1,0),

    // e.g., adr reg2, Base
    reg_def_use.def_used(EA_adr,Reg2,EA_add,_),
    arch.pc_relative_addr(EA_adr,Reg2,BaseAligned),

    data_word(LitPoolAddr,Size,Diff),

    Symbol1 = BaseAligned,
    Addr2 = as(Diff,address) + Symbol1,
    Symbol2 = Addr2-(Addr2 band 1).

value_reg(EA,Reg,EA,"NONE",0,as(Symbol2,number),1):-
    symbol_minus_symbol_litpool_access_pattern(_,_,_,Symbol2,_,_,EA,Reg,_).

labeled_data_candidate(Symbol2),
relative_jump_table_entry_candidate(LitPoolAddr,LitPoolAddr,Size,Symbol1,Symbol2,1,0):-
    symbol_minus_symbol_litpool_access_pattern(LitPoolAddr,Size,Symbol1,Symbol2,1,_,_,_,"AddPC").

/**
litpool_symbolic_operand

PC-relative symbolic operand
*/
.decl litpool_symbolic_operand(ea_litpool:address,data_access_size:unsigned,symbol1:address,symbol2:address,ea_def:address,reg_def:register,sym2_size:unsigned)

//  (A) ldr  reg1, LitPoolAddr1
//  (B) ldr  reg2, LitPoolAddr2
//  (C) add  reg1, pc, reg1 // reg1 is the address of symbol foo
//  (D) ldr  reg3, [reg1, reg2] // the referenced address is the address of symbol bar.
litpool_symbolic_operand(LitPoolAddr2,DataAccessSize,Symbol1,Symbol2,EA_D,Reg3,SymSize):-
    symbol_minus_symbol_litpool_access_pattern(_,_,_,Symbol1,1,_,EA_C,Reg0,_),
    (
        reg_def_use.def_used(EA_C,Reg1,EA_D,_), Reg1 = Reg0
        ;
        value_reg_edge(EA_restore,Reg1,EA_C,Reg0,1,0),
        reg_def_use.def_used(EA_restore,Reg1,EA_D,_)
    ),

    // (D) ldr reg3, [reg1, reg2]
    instruction_get_operation(EA_D,Operation),
    arch.load_operation(Operation),
    instruction_get_src_op(EA_D,_,IndOp),
    instruction_get_dest_op(EA_D,_,RegOp),
    op_indirect_mapped(IndOp,"NONE",Reg1,Reg2,_,0,SymSize),
    op_regdirect_contains_reg(RegOp,Reg3),

    reg_def_use.def_used(EA_B,Reg2,EA_D,_),

    // (B) ldr reg2, LitPoolAddr2
    litpool_ref(EA_B,EA_B,LitPoolAddr2,0,DataAccessSize,_),

    data_word(LitPoolAddr2,DataAccessSize,Diff),
    Symbol2 = as(Diff,address) + Symbol1.

value_reg(EA,Reg,EA,"NONE",0,as(Val,number),1):-
    litpool_symbolic_operand(_,_,_,Symbol2,EA,Reg,Size),
    track_register(Reg),
    data_word(Symbol2,Size,Val).

/**
Compute the value loaded from a literal pool.
  - ldr Reg, [BaseReg, Off]
  - ldrd Reg1, Reg2, [BaseReg, Off]
  - ldm BaseReg, {Reg1,...,RegN}
*/
value_reg(EA,Reg,EA,"NONE",0,Val,1):-
    litpool_ref(_,EA,RefAddr,LitPoolOffset,_,_),
    arch.load(EA,_,_,Reg,BaseReg,_,_,RegOffset),
    track_register(Reg),
    instruction_memory_access_size(EA,_,OpSize),
    Size = min(OpSize,4),
    // arch.load includes PC-relative displacement in RegOffset for
    // PC-relative loads, and litpool_ref includes it in LitPoolOffset,
    // so we must compensate for the double-count.
    (
        arch.pc_reg(BaseReg), arch.pc_relative_disp(EA,Adjustment)
        ;
        !arch.pc_reg(BaseReg), Adjustment = 0
    ),
    Addr = RefAddr + LitPoolOffset + as(RegOffset-Adjustment,unsigned),
    !relocation(Addr,_,_,_,_,_,_),
    data_word(Addr,Size,Val).

//  => equations: [LitPoolAddr1] = foo - (C)
//                [LitPoolAddr2] = bar - foo
//
symbol_minus_symbol(LitPoolAddr2,Size,Symbol1,Symbol2,1,0):-
    litpool_symbolic_operand(LitPoolAddr2,Size,Symbol1,Symbol2,_,_,_),
    !symbolic_expr_attribute(LitPoolAddr2,"GOT"),
    loaded_section(Beg,End,".got"),
    // Symbol2 is not in got.
    (
        Symbol2 < Beg, UNUSED(End)
        ;
        Symbol2 >= End, UNUSED(Beg)
    ),
    !relocation(LitPoolAddr2,_,_,_,_,_,_),
    (
        code(Symbol2)
        ;
        data_segment(DataBeg,DataEnd),
        Symbol2 >= DataBeg, Symbol2 < DataEnd
    ).

//  => equations: [LitPoolAddr1] = foo - (C)
//                [LitPoolAddr2] = bar(GOT) - foo => bar(GOT)
//
symbolic_expr_attribute(LitPoolAddr,"GOT"),
symbolic_expr_attribute(LitPoolAddr,"PCREL"),
symbolic_data(LitPoolAddr,SymSize,Got_entry):-
    litpool_symbolic_operand(LitPoolAddr,_,_,Got_entry,_,_,SymSize),
    loaded_section(GotBeg,GotEnd,".got"),
    Got_entry >= GotBeg,
    Got_entry < GotEnd,
    (
        relocation(Got_entry,RelType,Symbol,_,_,_,_),
        RelType != "RELATIVE",
        symbol(_,_,_,_,_,_,_,_,Symbol)
        ;
        symbolic_data(Got_entry,SymSize,_)
    ).

.functor functor_thumb32_branch_offset(Instruction:unsigned):number

symbolic_expr_from_relocation(EA+1,4,Symbol,Addend,as(Dest,address)):-
    binary_type("REL"),
    (
        relocation(EA,"THM_CALL",Symbol,_,_,_,"REL");
        relocation(EA,"THM_JUMP24",Symbol,_,_,_,"REL")
    ),
    Symbol != "",
    data_uword(EA,4,Insn),
    Offset = @functor_thumb32_branch_offset(Insn),
    Addend = Offset + 4,
    Dest = as(EA,number)+Addend.

impossible_jump_target(EA):-
    arch.it_conditional(EA,IT),
    code_in_block(EA,_),
    code_in_block(IT,_).

/**
ArchInfo auxdata inferred by the presence of specific instructions or patterns.
*/
.decl inferred_arch_info(Key:symbol,Value:symbol)
.output inferred_arch_info

// "System" is not a true hardware profile, but represents
// Application OR RealTime profiles.

// "blx label" is not possible on the "Microcontroller" profile.
inferred_arch_info("Profile","System"):-
    !arch_info("Profile",_),
    code_in_refined_block(EA,_),
    instruction_get_operation(EA,Operation),
    substr(Operation,0,3) = "BLX",
    arch.jump_operation_op_index(Operation,OpIndex),
    instruction_get_op(EA,OpIndex,Op),
    op_immediate(Op,_,_).

// ARM code is not possible on the "Microcontroller" profile.
inferred_arch_info("Profile","System"):-
    !arch_info("Profile",_),
    code_in_refined_block(EA,_),
    EA band 1 = 0.

inferred_arch_info("Profile","Microcontroller"):-
    !arch_info("Profile",_),
    code_in_refined_block(EA,_),
    instruction_get_operation(EA,Operation),
    (
        // The following instructions are only decoded with CS_MODE_MCLASS.
        // TODO: *some* MRS/MSR can be decoded without CS_MODE_MCLASS. We
        // should refine this rule to only match the ones that cannot.
        substr(Operation,0,3) = "MRS";
        substr(Operation,0,3) = "MSR"
    ).

// LDCL is not available on ARMv8+
// It could be v7 or anything older, but we guess v7 to provide maximum
// compatibility.
inferred_arch_info("Arch","v7"):-
    !arch_info("Arch",_),
    code_in_refined_block(EA,_),
    instruction_get_operation(EA,"LDCL").

// VLDR: label must be aligned on a word boundary within -/+1KB of the
// current instruction.
alignment(LitPoolAddr,4):-
    litpool_ref(_,EA_ldr,LitPoolAddr,0,_,_),
    instruction_get_operation(EA_ldr,"VLDR"),
    instruction_get_dest_op(EA_ldr,_,DestReg),
    op_regdirect_contains_reg(DestReg,Reg),
    // Only align the first literal pool for consecutive pools.
    // If Dest reg is S, one word; two words otherwise.
    arch.float_reg(Reg,Disp),
    (
        !litpool_ref(_,_,LitPoolAddr-Disp,0,_,_)
        ;
        litpool_ref(_,EA0,LitPoolAddr-Disp,0,_,_),
        !instruction_get_operation(EA0,"VLDR")
    ).

data_object_point(DataEA,Size,"symbol",2,"arm jump-table3"),
data_object_candidate(DataEA,Size,"symbol"):-
    arm_jump_table_data_block(EA_jmp,TableStart,Block,BlockSize),
    arm_jump_table_candidate(EA_jmp,_,TableStart,DataEA,Size,_,_,"absolute",_),
    Block <= DataEA, DataEA+Size <= Block+BlockSize.

data_object_point(DataEA,Size,"symbol-symbol",2,"arm jump-table3"),
data_object_candidate(DataEA,Size,"symbol-symbol"):-
    arm_jump_table_data_block(EA_jmp,TableStart,Block,BlockSize),
    arm_jump_table_candidate(EA_jmp,_,TableStart,DataEA,Size,_,_,Type,_),
    Block <= DataEA, DataEA+Size <= Block+BlockSize,
    (
        Type = "rel_unsigned";
        Type = "rel_signed"
    ).

jump_table_start(EA,Size,TableStart,Reference,1):-
    arm_jump_table_candidate(EA,Reference,TableStart,DataEA,Size,_,_,_,_),
    jump_table_candidate_refined(EA,DataEA,_).

relative_jump_table_entry_candidate(DataEA,TableStart,Size,Reference,TargetAddr,as(Scale,number),Offset):-
    arm_jump_table_candidate_start(_,EA,_,Reference,TableStart,Size,_,Scale,NeedsOffset),
    // Find the first (valid) entry - not always at TableStart!
    DataEA = min DataEA : {
        arm_jump_table_candidate(EA,Reference,TableStart,DataEA,Size,_,_,_,Scale)
    },
    jump_table_candidate_refined(EA,DataEA,TargetAddr),
    Offset = as(as(NeedsOffset,unsigned) band as(TargetAddr,unsigned),number).

relative_jump_table_entry_candidate(DataEA,TableStart,Size,Reference,TargetAddr,as(Scale,number),Offset):-
    // ensure the previous entry is a candidate.
    relative_jump_table_entry_candidate(PrevDataEA,TableStart,Size,Reference,_,as(Scale,number),_),
    DataEA = PrevDataEA + Size,
    arm_jump_table_candidate_start(_,EA,_,Reference,TableStart,Size,_,Scale,NeedsOffset),
    arm_jump_table_candidate(EA,Reference,TableStart,DataEA,Size,_,_,_,Scale),
    jump_table_candidate_refined(EA,DataEA,TargetAddr),
    Offset = as(as(NeedsOffset,unsigned) band as(TargetAddr,unsigned),number).
