//===- arch_arm64.dl ----------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2020 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//

/**
 * Define a set of predicates to model aarch64 specific instructions
 * and characteristics
 */

.comp ARM64 : Arch {

#include "float_operations.dl"
#include "jump_operations.dl"
#include "interrupt_operations.dl"
#include "registers.dl"
#include "memory_access.dl"

arch("ARM64").

move_operation(Operation) :-
    instruction_get_operation(_, Operation),
    contains("MOV", Operation).

load_operation(Operation):-
    instruction_get_operation(_,Operation),
    (
        contains("LDR", Operation)
        ;
        contains("LDP", Operation)
    ).

load_word_operation(Operation):-
    instruction_get_operation(_,Operation),
    substr(Operation,0,3) = "LDR",
    (
        strlen(Operation) = 3; // unconditional
        strlen(Operation) = 5  // conditional ldr
    ).

store_operation(Operation):-
    instruction_get_operation(_,Operation),
    (
        contains("STR", Operation)
        ;
        contains("STP", Operation)
    ).

is_nop(EA):-
    instruction_get_operation(EA,Operation),
    (
        Operation = "NOP";
        Operation = "B.NV"  // B.NV is a never-taken branch.
    ).

arithmetic_operation("ADD").
arithmetic_operation("SUB").
arithmetic_operation("MUL").

arithmetic_operation("LSL").
arithmetic_operation("LSR").
arithmetic_operation("ASR").
arithmetic_operation("ROR").
arithmetic_operation("MVN").

multiplication_operation("MUL").
multiplication_operation("LSL").

shift_rotate_operation("ASR").
shift_rotate_operation("LSL").
shift_rotate_operation("LSR").
shift_rotate_operation("ROR").

logic_operation("AND").
logic_operation("XOR").
logic_operation("ORR").
logic_operation("EON").
logic_operation("ORN").
logic_operation("BIC").

pointer_size(8).

call_operation("BL").
call_operation("BLR").

syscall_operation("SVC").

return_operation("RET").

halt_operation("HLT").

cmp_operation("CMP").

// On ARM64, capstone doesn't provide the operand size. The ddisasm decoder
// assumes all operands are 32-bit. Anything else must be defined here.
data_access_size(Operation,as(DestReg,register),Size):-
    instruction_get_operation(_,Operation),
    op_regdirect(_,DestReg),
    (
        substr(Operation,0,4) = "LDRB", Size = 1;
        substr(Operation,0,5) = "LDRSB", Size = 1;
        substr(Operation,0,4) = "LDRH", Size = 2;
        substr(Operation,0,5) = "LDRSH", Size = 2
    ).

data_access_size("LDR",as(Reg,register),Size):-
    register_size_bytes(Reg, Size).

// ADD reg, reg, #imm
reg_arithmetic_operation(EA,Dst,Src,1,Immediate):-
    instruction(EA,_,_,"ADD",Op1,Op2,Op3,0,_,_),
    op_regdirect_contains_reg(Op1,Src),
    op_immediate(Op2,Immediate,_),
    op_regdirect_contains_reg(Op3,Dst).

// ADD reg, reg, reg
reg_reg_arithmetic_operation(EA,Dst,Src1,Src2,Sign*Mult,0):-
    instruction(EA,_,_,Operand,Op1,Op2,Op3,0,_,_),
    (
        Operand = "ADD", Sign = 1;
        Operand = "SUB", Sign = -1
    ),
    op_regdirect_contains_reg(Op1,Src1),
    op_regdirect_contains_reg(Op2,Src2),
    op_regdirect_contains_reg(Op3,Dst),
    (
        op_shifted(EA,2,Shift,"LSL"), Mult=2^as(Shift,number);
        !op_shifted(EA,2,_,_), Mult = 1
    ).

/**
The referenced address of an ADRP or ADR instruction

This intermediate relation is an optimization that allows performing non-
recursive work before running the recursive rule adr_used.
*/
.decl adr_dest(EA:address,Reg:register,Dest:address)

adr_dest(EA,Reg,as(Dest,address)):-
    // ADRP <Register> <Immediate>
    // e.g. adrp x0, ImmOp
    instruction(EA,_,_,Operation,ImmOp,RegOp,0,0,_,_),
    substr(Operation,0,3) = "ADR",
    op_immediate(ImmOp,Dest,_),
    op_regdirect_contains_reg(RegOp,Reg).

// mark adrp instructions as PC-relative
// This also ensures they are marked as def_used_for_address
pc_relative_addr(EA,Reg,Dest):-
    adr_dest(EA,Reg,Dest).

/**
Table of ARM64 extend types, whether they are signed, and the size of the
source, in bits.
*/
.decl extend_type(Type:symbol,Signed:unsigned,SrcBits:unsigned)

extend_type("UXTB",0,8).
extend_type("UXTH",0,16).
extend_type("UXTW",0,32).
extend_type("UXTX",0,64).
extend_type("SXTB",1,8).
extend_type("SXTH",1,16).
extend_type("SXTW",1,32).
extend_type("SXTX",1,64).

extend_reg(EA,Reg,Signed,SrcBits):-
    extend_type(ExtendType,Signed,SrcBits),
    op_shifted(EA,Index,_,ExtendType),
    instruction_get_op(EA,Index,Op),
    op_regdirect_contains_reg(Op,Reg).

}
