//===- use_def_analysis.dl --------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
This modules computes def-uses chains for a subset of the registers (defined in track_register).
and only if those chains are related eventually to an access to memory.

-'def' computes definitions of registers at each of the locations.

-'def_used_for_address' compute the set of live uses backwards at each of the locations.
 However, it only computes uses starting at accesses to memory.

-'def_used' intersects the two previous facts to obtain def-use chains.

The traversal of def_used_for_address is kept intra-procedural (not following call edges).
*/

//////////////////////////////////////////////////////////////////////////////
//local underapproximation of control flow
.decl local_next(ea:address,ea_next:address) inline

local_next(EA,EA_next):-
    code_in_block(EA,Block),
    may_fallthrough(EA,EA_next),
    code_in_block(EA_next,Block).

/**
next() for each instruction within a block.
*/
.decl block_instruction_next(Block:address,Before:address,After:address)

block_instruction_next(Block,Before,After):-
    code_in_block(Before,Block),
    next(Before,After).

.decl inter_procedural_edge(Src:address,Dest:address)

inter_procedural_edge(Src,Dest):-
    unconditional_jump(Src),
    direct_jump(Src,Dest),
    // If a function begins between Src and Dest (including at Dest), then it
    // is an interprocedural edge (assumes that functions are contiguous).
    function_inference.function_entry_initial(Between),
    Src < Between, Between <= Dest.

inter_procedural_edge(Src,Dest):-
    may_fallthrough(Src,Dest),
    !pc_load_call(Src,Dest),
    function_inference.function_entry_initial(Dest).

.decl block_next(Block:address,BlockEnd:address,NextBlock:address)

block_next(Block,EA,Block2):-
    block_last_instruction(Block,EA),
    may_fallthrough(EA,Block2),
    !no_return_call_propagated(EA),
    !inter_procedural_edge(EA,Block2),
    block(Block2).

block_next(Block,EA,EA_next):-
    block_last_instruction(Block,EA),
    !arch.delay_slot(_,EA),
    direct_jump(EA,EA_next),
    !inter_procedural_edge(EA,EA_next).

block_next(Block,EA,EA_next):-
    block_last_instruction(Block,EA),
    arch.delay_slot(JumpEA,EA),
    direct_jump(JumpEA,EA_next),
    !inter_procedural_edge(JumpEA,EA_next).

block_next(Block,EA,Dest):-
    block_last_instruction(Block,EA),
    jump_table_target(EA,Dest).

// Path created by exception handling.
block_next(Block,EA,Block2):-
    lsda_callsite_addresses(Beg,End, Block2),
    block_last_instruction(Block,EA),
    EA >= Beg, EA < End,
    block(Block2).


/**
'Call' implicitly uses 'Reg', such as register parameters.
*/
.decl call_uses_reg(Call:address,Reg:register)

call_uses_reg(0,"NONE"):- false.

//////////////////////////////////////////////////////////////////////////////
// Main definitions


/**
The AdvancedDefUsed component defines relations and rules shared by def-use
analysis for both registers and stack variables.
*/
.comp AdvancedDefUsed<T> {

    /**
    A <T> is implicitly defined by being compared to a constant and then jumping
    this definition only takes place in between the jump and the target that implies equality
    */
    .decl flow_def(EA:address,Var:T,EA_next:address,Value:number)

    /**
    A Var <T> can propagate through the instruction at EA.

    Intended to be extended by child components to modify behavior of AdvancedDefUsed.
    */
    .decl ea_propagates_def(EA:address,Var:T) inline

    /**
    A Var <T> can propagate through Block.
    */
    .decl block_propagates_def(Block:address,Var:T) inline

    /**
    A Var <T> is defined in the Block
    */
    .decl defined_in_block(Block:address,Var:T)

    defined_in_block(Block,Var):-
        def(EA,Var),
        code_in_block(EA,Block).

    /**
    A Var <T> is used in the Block
    */
    .decl used_in_block(Block:address,EA_used:address,Var:T,Index:operand_index)

    used_in_block(Block,EA_used,Var,Index):-
        used(EA_used,Var,Index),
        code_in_block(EA_used,Block).

    /**
    The last address prior to EA where Var was defined within the block

    Multiple are possible in conditional cases.
    */
    .decl block_last_def(EA:address,EA_def:address,Var:T)

    block_last_def(EA_next,EA,Var):-
        def(EA,Var),
        local_next(EA,EA_next).

    block_last_def(EA_next,EA_def,Var):-
        block_last_def(EA,EA_def,Var),
        !must_def(EA,Var),
        ea_propagates_def(EA,Var),
        local_next(EA,EA_next).

    /**
    Indicates at EA, Var has multiple possible last definitions in the block
    due to conditional def(s).
    */
    .decl ambiguous_block_last_def(EA:address,Var:T)

    ambiguous_block_last_def(EA,Var):-
        block_last_def(EA,EA_def,Var),
        block_last_def(EA,EA_other,Var),
        EA_def != EA_other.

    /**
    The last definition(s) of <T> in a given block.

    Multiple are possible in conditional cases.
    */
    .decl last_def_in_block(Block:address,EA_def:address,Var:T)

    last_def_in_block(Block,EA_def,Var):-
        block_last_instruction(Block,BlockEnd),
        (
            def(BlockEnd,Var),
            EA_def=BlockEnd
            ;
            !must_def(BlockEnd,Var),
            ea_propagates_def(BlockEnd,Var),
            block_last_def(BlockEnd,EA_def,Var)
        ).

    /**
    Indicates at the end of Block, Var has multiple possible last definitions
    in the block due to conditional def(s).
    */
    .decl ambiguous_last_def_in_block(Block:address,Var:T)

    ambiguous_last_def_in_block(EA,Var):-
        last_def_in_block(EA,EA_def,Var),
        last_def_in_block(EA,EA_other,Var),
        EA_def != EA_other.

    /**
    A <T> is referenced in a block
    */
    .decl ref_in_block(Block:address,Var:T)

    ref_in_block(Block,Var):-
        defined_in_block(Block,Var);
        used_in_block(Block,_,Var,_).

    /**
    A <T> is defined in a block, and is still live at the end of the block.

    This can potentially be paired with a live_var_used if there is a path
    between the Blocks.
    */
    .decl live_var_def(Block:address,VarIdentity:T,LiveVar:T,EA_def:address)

    live_var_def(Block,Var,Var,EA_def):-
        last_def_in_block(Block,EA_def,Var).

    live_var_def(Block,Var,Var,EA_def):-
        flow_def(EA_def,Var,Block,_),
        !defined_in_block(Block,Var),
        block_propagates_def(Block,Var).

    /**
    A <T> is used in a block, but a live definition for that use is not found
    within the block.

    We consider a <T> to be live only if it is live for interblock edges.
    Intrablock cases are handled directly by the def_used relation.

    To find the definition for this use, live_var_at_block_end will have to
    propagate backward from the block.

    The `Moves` field, used only by stack var tracking, tracks the number of
    basic blocks that perform a stack variable transformation (where a stack
    variable descriptor is adjusted due to a change in the stack pointer).
    This prevents infinite loops.
    */
    .decl live_var_used(Block:address,LiveVar:T,UsedVar:T,EA_used:address,Index:operand_index,Moves:unsigned) overridable

    // Used in this block
    live_var_used(Block,Var,Var,EA_used,Index,0):-
        used_in_block(Block,EA_used,Var,Index),
        !block_last_def(EA_used,_,Var).

    /**
    The <T> is live at the end of Block, and will be used in BlockUsed.

    Propagates backward from usages to search for defs.

    This is faster than propagating forward from defs, since a used value should
    always be defined in well-behaved code. In addition, we know to stop
    propagating once the definition is found.

    The alternative strategy of propagating forward from defs means that it must
    propagate indefinitely, in case it is used multiple times. Further, side-effect
    definitions are often unused.

    To further optimize this strategy, if another use is encountered, we don't
    propagate any further. Later, the relation live_var_at_prior_used() propagates
    defs forward through adjacent uses.
    */
    .decl live_var_at_block_end(Block:address,BlockUsed:address,Var:T)

    // Base case
    live_var_at_block_end(PrevBlock,Block,Var):-
        block_next(PrevBlock,PrevBlockEnd,Block),
        live_var_used(Block,Var,_,_,_,_),
        !flow_def(PrevBlockEnd,Var,Block,_).

    // Recursive case
    live_var_at_block_end(PrevBlock,BlockUsed,Var):-
        live_var_at_block_end(Block,BlockUsed,Var),
        !ref_in_block(Block,Var), // !flow_def is implied by !ref_in_block
        block_propagates_def(Block,Var),
        block_next(PrevBlock,_,Block).

    // Ensure we partition on the delta relation in each version of the rule
    // for best performance: in rule version 1, swap delta_block_next (2) with
    // live_var_at_block_end (1).
    .plan 1: (2,1)

    /**
    The <T> is live at EA_used and at the beginning of BlockUsed, and
    holds the same value from the same definition. The <T> is used in
    BlockUsed.

    Forms an edge between two used() that depend on the same def.
    */
    .decl live_var_at_prior_used(EA_used:address,BlockUsed:address,Var:T)

    live_var_at_prior_used(EA_used,BlockUsed,Var):-
        live_var_at_block_end(Block,BlockUsed,Var),
        used_in_block(Block,EA_used,Var,_),
        // The definition must be propagated for us to connect the two uses
        // with live_var_at_prior_used. If the definition is not propagated,
        // e.g. because there is a stack adjustment, the two uses might refer
        // to different variables and should not be connected.
        block_propagates_def(Block,Var),
        // Although this does not generate a live_var_at_prior used for a used
        // where the def was in the same block, it shouldn't be necessary since
        // the def will generate a live_var_def, which will connect directly to
        // the used via the normal interblock def_used rule (i.e., we don't
        // need to do used-used chaining if for a used in the same block as the
        // def).
        !defined_in_block(Block,Var).
}

.comp RegisterDefUse : AdvancedDefUsed<register>, BasicRegDefUse {

    flow_def(EA_jump,Reg,EA_target,Immediate):-
        code(EA),
        cmp_immediate_to_reg(EA,Reg,_,Immediate),
        track_register(Reg),
        next(EA,EA_jump),
        direct_jump(EA_jump,EA_target),
        arch.jump(EA_jump),
        arch.conditional(EA_jump,"E").

    flow_def(EA_jump,Reg,EA_target,Immediate):-
        code(EA),
        cmp_immediate_to_reg(EA,Reg,_,Immediate),
        track_register(Reg),
        next(EA,EA_jump),
        direct_jump(EA_jump,_),
        next(EA_jump,EA_target),
        arch.jump(EA_jump),
        arch.conditional(EA_jump,"NE").

    // Register defs are never invalidated.
    ea_propagates_def(EA,Reg):-
        UNUSED(EA),
        UNUSED(Reg).

    block_propagates_def(Block,Reg):-
        UNUSED(Block),
        UNUSED(Reg).

    /**
    A value returned from a function is used.
    */
    .decl return_val_used(EA_call:address,Callee:address,Reg:register,EA_used:address,Index_used:operand_index)

    return_val_used(EA_call,Callee,Reg,EA_used,Index_used):-
        arch.return_reg(Reg),
        def_used(EA_call,Reg,EA_used,Index_used),
        direct_call(EA_call,Callee).

    /**
    A value is returned from a called procedure Callee, from the last Block with
    the last instruction at BlockEnd.
    */
    .decl return_block_end(Callee:address,CalleeEnd:address,Block:address,BlockEnd:address)

    return_block_end(Callee,CalleeEnd,Block,BlockEnd):-
        direct_call(_,Callee),
        fde_addresses(Callee,CalleeEnd),
        arch.return(CalleeReturn),
        Callee <= CalleeReturn,
        CalleeReturn < CalleeEnd,
        code_in_block(CalleeReturn,Block),
        block_last_instruction(Block,BlockEnd).

    // Extend for values returned in this block
    live_var_used(RetBlock,Reg,Reg,EA_used,Index,1):-
        return_block_end(Callee,_,RetBlock,RetBlockEnd),
        !block_last_def(RetBlockEnd,_,Reg),
        return_val_used(_,Callee,Reg,EA_used,Index).

    used(EA,Reg,0):-
        call_uses_reg(EA,Reg).

    /**
    A <T> is defined in 'EA_def' and used in 'EA_used' in the operand with index 'Index_used'
    */
    .decl def_used(EA_def:address,Var:register,EA_used:address,Index_used:operand_index)

    // Intra-block def-use
    def_used(EA_def,Var,EA_used,Index):-
        used(EA_used,Var,Index),
        block_last_def(EA_used,EA_def,Var).

    // Inter-blocks def-use (explicit def)
    def_used(EA_def,VarIdentity,EA_used,Index):-
        live_var_at_block_end(Block,BlockUsed,Var),
        live_var_def(Block,VarIdentity,Var,EA_def),
        live_var_used(BlockUsed,Var,Var,EA_used,Index,_).

    .plan 1: (3, 1, 2)

    // Forward propagate def_used to downstream used
    def_used(EA_def,Var,Next_EA_used,NextIndex):-
        live_var_at_prior_used(EA_used,NextUsedBlock,Var),
        def_used(EA_def,Var,EA_used,_),
        live_var_used(NextUsedBlock,Var,Var,Next_EA_used,NextIndex,_).

    // Inter-procedural def-use
    def_used(EA_def,Reg,EA_used,Index):-
        return_val_used(_,Callee,Reg,EA_used,Index),
        return_block_end(Callee,_,_,BlockEnd),
        block_last_def(BlockEnd,EA_def,Reg).
}

.init reg_def_use = RegisterDefUse

.type stack_var = [BaseReg:register,StackPos:number]

/**
An offset is added to a stack pointer register at EA.
*/
.decl adjusts_stack_in_block(Block:address,EA:address,BaseReg:register,Offset:number)

adjusts_stack_in_block(Block,EA,BaseReg,Offset):-
    (
        arch.frame_pointer(BaseReg);
        arch.stack_pointer(BaseReg)
    ),
    arch.reg_arithmetic_operation(EA,BaseReg,BaseReg,1,Offset),
    code_in_block(EA,Block).

/**
A stack base register is moved to another potential stack base register.
*/
.decl stack_base_reg_move(Block:address,EA:address,Src:register,Dst:register)

stack_base_reg_move(Block,EA,Src,Dst):-
    (
        arch.frame_pointer(Src);
        arch.stack_pointer(Src)
    ),
    (
        arch.frame_pointer(Dst);
        arch.stack_pointer(Dst)
    ),
    Dst != Src,
    arch.move_reg_reg(EA,Dst,Src),
    code_in_block(EA,Block).

.comp StackVarDefUse : AdvancedDefUsed<stack_var>, BasicDefUse<stack_var> {

    // When a value is stored to the stack, it defines a stack value.
    def(EA,[BaseReg,StackPos]):-
        (
            arch.frame_pointer(BaseReg);
            arch.stack_pointer(BaseReg)
        ),
        (
            arch.store(EA,_,_,_,BaseReg,"NONE",_,StackPos);
            arch.store_immediate(EA,_,_,_,BaseReg,"NONE",_,StackPos)
        ).

    // A push with an indirect operand, e.g. push [addr]
    // defines a stack value (only possible in x86)
    def(EA,[StackReg,0]):-
        (
            binary_isa("X64");
            binary_isa("X86")
        ),
        arch.stack_pointer(StackReg),
        instruction(EA,_,_,"PUSH",SrcOp,0,0,0,_,_),
        op_indirect(SrcOp,_,_,_,_,_,_).

    // TODO: flow_def (x86 can have these!)
    flow_def(0,nil,0,0):-
        false.

    // When a value is loaded from the stack, it is a use of a stack value.
    used(EA,[BaseReg,StackPos],SrcOp):-
        (
            arch.frame_pointer(BaseReg);
            arch.stack_pointer(BaseReg)
        ),
        arch.load(EA,SrcOp,_,_,BaseReg,"NONE",_,StackPos).

    // A stack variable can also be directly used as an indirect operand
    used(EA,[BaseReg,StackPos],OpIndex):-
        (
            arch.frame_pointer(BaseReg);
            arch.stack_pointer(BaseReg)
        ),
        op_indirect_mapped(IndirectOp,"NONE",BaseReg,"NONE",_,StackPos,_),
        instruction_get_src_op(EA,OpIndex,IndirectOp).

    ea_propagates_def(EA,[BaseReg,StackPos]):-
        !reg_def_use.def(EA,BaseReg),
        UNUSED(StackPos).

    block_propagates_def(Block,[BaseReg,StackPos]):-
        !reg_def_use.defined_in_block(Block,BaseReg),
        UNUSED(StackPos).

    /**
    A stack is defined in 'EA_def' and used in 'EA_used' in the operand with index 'Index_used'
    */
    .decl def_used(EA_def:address,VarDef:stack_var,EA_used:address,VarUsed:stack_var,Index_used:operand_index)

    // Intra-block def-use
    def_used(EA_def,Var,EA_used,Var,Index):-
        used(EA_used,Var,Index),
        block_last_def(EA_used,EA_def,Var).

    // Inter-blocks def-use (explicit def)
    def_used(EA_def,VarDef,EA_used,VarUsed,Index):-
        live_var_at_block_end(Block,BlockUsed,Var),
        live_var_def(Block,VarDef,Var,EA_def),
        live_var_used(BlockUsed,Var,VarUsed,EA_used,Index,_).

    .plan 1: (3, 1, 2)

    // def in block with moves/adjustments (used may be in the same block, or propagated to this block).
    def_used(EA_def,DefVar,EA_used,UsedVar,Index):-
        live_var_used_in_block(_,EA,DefVar,UsedVar,EA_used,Index,_),
        may_fallthrough(EA_def,EA),
        code_in_block(EA_def,Block),
        code_in_block(EA,Block),
        def(EA_def,DefVar).

    // Forward propagate def_used to downstream used
    def_used(EA_def,VarDef,Next_EA_used,VarUsed,NextIndex):-
        live_var_at_prior_used(EA_used,NextUsedBlock,Var),
        def_used(EA_def,VarDef,EA_used,Var,_),
        live_var_used(NextUsedBlock,Var,VarUsed,Next_EA_used,NextIndex,_).

    /**
    Propagate live uses backwards within a block on a per-instruction basis.
    */
    .decl live_var_used_in_block(Block:address,EA:address,LiveVar:stack_var,UsedVar:stack_var,EA_used:address,Index:operand_index,Moves:unsigned)

    /**
    Specify the number of moves of the stack register (the stack pointer or the frame pointer)
    that are tracked in the def-use stack analysis. This parameters is used to ensure rapid
    convergence
    */
    .decl moves_limit(Moves:unsigned)

    moves_limit(2).

    // Used in this block
    live_var_used_in_block(Block,EA_used,[BaseReg,StackPos],[BaseReg,StackPos],EA_used,Index,0):-
        used_in_block(Block,EA_used,[BaseReg,StackPos],Index).

    // live_var_used has propagated to this block, and there is a stack adjustment or move.
    // we must propagate through this block on a per-instruction basis.
    live_var_used_in_block(Block,NextEA,[BaseReg,StackPos],VarUsed,EA_used,Index,Moves+1):-
        (
            adjusts_stack_in_block(Block,_,BaseReg,_);
            stack_base_reg_move(Block,_,_,BaseReg)
        ),
        live_var_at_block_end(Block,BlockUsed,[BaseReg,StackPos]),
        live_var_used(BlockUsed,[BaseReg,StackPos],VarUsed,EA_used,Index,Moves),
        moves_limit(MovesLimit),
        Moves <= MovesLimit,
        block_last_instruction(Block,LastEA),
        next(LastEA,NextEA).

    // Propagate
    live_var_used_in_block(Block,EA,[BaseReg,StackPos],[FinalBaseReg,FinalStackPos],EA_used,Index,Moves):-
        live_var_used_in_block(Block,Next,[BaseReg,StackPos],[FinalBaseReg,FinalStackPos],EA_used,Index,Moves),
        block_instruction_next(Block,EA,Next),
        !reg_def_use.def(EA,BaseReg),
        !def(EA,[BaseReg,StackPos]).

    // Instruction adjusts the stack pointer
    live_var_used_in_block(Block,EA,[BaseReg,StackPos+Offset],UsedVar,EA_used,Index,Moves):-
        live_var_used_in_block(Block,Next,[BaseReg,StackPos],UsedVar,EA_used,Index,Moves),
        block_instruction_next(Block,EA,Next),
        adjusts_stack_in_block(_,EA,BaseReg,Offset),
        !def(EA,[BaseReg,StackPos]),
        // We assume that negative offsets from the stack pointer are not live.
        (
            arch.stack_pointer(BaseReg),
            StackPos+Offset >= 0
        ;
            !arch.stack_pointer(BaseReg)
        ).

    // Instruction copies the stack pointer.
    // Note: since this *copies* it, there may now be two valid
    // live_var_used_in_block at EA if SrcBaseReg is not modified.
    live_var_used_in_block(Block,EA,[SrcBaseReg,StackPos],UsedVar,EA_used,Index,Moves):-
        live_var_used_in_block(Block,Next,[DstBaseReg,StackPos],UsedVar,EA_used,Index,Moves),
        block_instruction_next(Block,EA,Next),
        stack_base_reg_move(_,EA,SrcBaseReg,DstBaseReg).

    .override live_var_used

    // If the live var propagates to the beginning of the block, add it to the inter-block relation.
    live_var_used(Block,LiveVar,UsedVar,EA_used,Index,Moves):-
        live_var_used_in_block(Block,Block,LiveVar,UsedVar,EA_used,Index,Moves).

}

.init stack_def_use = StackVarDefUse

/**
 * The register 'Reg' used as an address at address 'EA'.
 */
.decl reg_used_for(EA:address,Reg:register,Type:symbol)

reg_used_for(EA,Reg,"Memory"):-
    reg_def_use.used(EA,Reg,Index),
    instruction_get_op(EA,Index,Op),
    op_indirect_contains_reg(Op,Reg).

reg_used_for(EA,Reg,"Jump"):-
    reg_jump(EA,Reg),
    reg_def_use.used(EA,Reg,_).

reg_used_for(EA,Reg,"Call"):-
    reg_call(EA,Reg),
    reg_def_use.used(EA,Reg,_).

/**
 * The register 'Reg' as defined at address 'EA_def' is later used either as an address
 * or to compute an address.
 */
.decl def_used_for_address(EA_def:address,Reg:register,Type:symbol)

def_used_for_address(EA_def,Reg,Type):-
    reg_def_use.def_used(EA_def,Reg,EA,_),
    reg_used_for(EA,Reg,Type).

def_used_for_address(EA_def,Reg,Type):-
    def_used_for_address(EA_used,_,Type),
    reg_def_use.def_used(EA_def,Reg,EA_used,_).

def_used_for_address(EA,Reg,"PCRelative"):-
    arch.pc_relative_addr(EA,Reg,_).

/*
This rule propagates `def_used_for_address` through the stack:
```
mov $addr, %rax
mov %rax, 10(%rsp) // store
...
mov 10(%rsp), %rbx // load
call (%rbx)
```
If %rbx is used for an address and it was loaded from the stack, which in turn
was defined from another register %rax, then %rax was also used as an address.
*/
def_used_for_address(EA_def,Reg1,Type):-
    def_used_for_address(EALoad,Reg2,Type),
    arch.load(EALoad,_,_,Reg2,RegBaseLoad,"NONE",_,StackPosLoad),
    stack_def_use.def_used(EAStore,[RegBaseStore,StackPosStore],EALoad,[RegBaseLoad,StackPosLoad],_),
    arch.store(EAStore,_,_,Reg1,RegBaseStore,"NONE",_,StackPosStore),
    reg_def_use.def_used(EA_def,Reg1,EAStore,_).
